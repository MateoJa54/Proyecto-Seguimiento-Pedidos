version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres-db
    environment:
      POSTGRES_DB: clientedb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - shared-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d clientedb || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 10

  oauth2-server:
    build:
      context: ./oauth2
      dockerfile: Dockerfile
    container_name: oauth2-server
    environment:
      # IMPORTANTE: el issuer que el server devolver√° en discovery (AJUSTA si quieres otro)
      AUTH_ISSUER: http://localhost:9000
    ports:
      - "9000:9000"
    networks:
      - shared-net
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9000/.well-known/openid-configuration || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 12

  cliente-service:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: cliente-ms
    depends_on:
      - postgres
      - oauth2-server
    ports:
      - "8081:8081"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: clientedb
      DB_USER: postgres
      DB_PASSWORD: postgres
      PORT: 8081
      JWT_ISSUER_URI: http://host.docker.internal:9000   # dentro de docker el issuer es el service-name
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - shared-net

  orders-db:
    image: mysql:8.0
    container_name: orders-mysql
    environment:
      MYSQL_ROOT_PASSWORD: admin123
      MYSQL_DATABASE: orders
    ports:
      - "3308:3306"
    volumes:
      - orders-db-data:/var/lib/mysql
    networks:
      - shared-net
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -uroot -padmin123 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 12

  orders-service:
    build:
      context: ./orders
      dockerfile: Dockerfile
    container_name: orders-ms
    depends_on:
      - orders-db
      - oauth2-server
    ports:
      - "8083:8083"
    environment:
      DB_HOST: orders-db
      DB_PORT: 3306
      DB_DATABASE: orders
      DB_USER: root
      DB_PASSWORD: admin123
      PORT: 8083
      JWT_ISSUER_URI: http://host.docker.internal:9000
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - shared-net

  redis:
    image: redis:6.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - shared-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 12

  tracking-ms:
    build:
      context: ./tracking-service
      dockerfile: Dockerfile
    container_name: tracking-ms
    depends_on:
      - redis
      - oauth2-server
    ports:
      - "8084:8084"
    environment:
      PORT: 8084
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_ISSUER_URI: http://host.docker.internal:9000
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - shared-net


  frontend:
    build:
      context: ./delivery-frontend
      dockerfile: Dockerfile
    container_name: frontend-ms
    depends_on:
      - oauth2-server
      - cliente-service
      - orders-service
      - tracking-ms
    ports:
      - "4200:80"        # nginx dentro del container escucha 80
    networks:
      - shared-net

volumes:
  pgdata:
  orders-db-data:
  redis-data:

networks:
  shared-net:
    driver: bridge
